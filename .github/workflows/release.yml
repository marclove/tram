name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get tag name
        id: get_tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          release_name: Tram ${{ steps.get_tag.outputs.tag_name }}
          body: |
            ## What's Changed
            
            See the full changelog at https://github.com/${{ github.repository }}/compare/...
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload (${{ matrix.target }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: tram-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: tram-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: tram-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: tram-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: tram-windows-x64.exe
    steps:
      - uses: actions/checkout@v4
      
      - name: Install proto
        uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true
      
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Install cross (for ARM builds on Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross
      
      - name: Build release binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Prepare asset
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp target/${{ matrix.target }}/release/tram.exe ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/tram ${{ matrix.asset_name }}
          fi
        shell: bash
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install proto
        uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      
      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p tram-core --token $CARGO_REGISTRY_TOKEN
          sleep 30  # Wait for crates.io to update
          cargo publish -p tram-config --token $CARGO_REGISTRY_TOKEN
          sleep 30
          cargo publish -p tram-workspace --token $CARGO_REGISTRY_TOKEN
          sleep 30
          cargo publish -p tram --token $CARGO_REGISTRY_TOKEN